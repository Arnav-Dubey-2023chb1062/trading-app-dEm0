from datetime import datetime, timedelta, timezone
from typing import Optional

from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from jose import JWTError, jwt
from passlib.context import CryptContext

# --- User Models (import from app.models.user_models) ---
from app.models.user_models import TokenData, User, UserInDB # Added User, UserInDB

# --- Configuration ---
SECRET_KEY = "your-secret-key"  # KEEP THIS SECRET! In a real app, load from env or config
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

# --- Password Hashing ---
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def verify_password(plain_password: str, hashed_password: str) -> bool:
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password: str) -> str:
    return pwd_context.hash(password)

# --- JWT Handling ---
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/users/login")

# In-memory user storage (simulates database)
# Will be populated by registration route for now
# Note: In a real app, user_id would be auto-generated by the DB
_fake_db_users_auth_service: dict[str, UserInDB] = {}

# Helper to get user from our fake DB
def get_user_from_db(username: str) -> Optional[UserInDB]:
    return _fake_db_users_auth_service.get(username)

def create_access_token(data: dict, expires_delta: Optional[timedelta] = None) -> str:
    to_encode = data.copy() # data should contain 'sub': username
    if expires_delta:
        expire = datetime.now(timezone.utc) + expires_delta
    else:
        expire = datetime.now(timezone.utc) + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

async def get_current_user(token: str = Depends(oauth2_scheme)) -> UserInDB:
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: Optional[str] = payload.get("sub")
        if username is None:
            raise credentials_exception
        # token_data = TokenData(username=username) # No longer just returning TokenData
    except JWTError:
        raise credentials_exception

    user = get_user_from_db(username)
    if user is None:
        raise credentials_exception
    return user

async def get_current_active_user(current_user: UserInDB = Depends(get_current_user)) -> User:
    # In a real app, the UserInDB model might have a 'disabled' field
    # For now, we assume if the user exists in our fake_db, they are active
    # We'll use the `disabled` field from the user_routes fake_users_db for now.
    # This part needs careful synchronization if we maintain two fake dbs.
    # For simplicity, let's assume UserInDB has a 'disabled' field or we check it here.

    # Let's assume UserInDB model will have a 'disabled' field or similar.
    # For now, if they are in DB, they are "active" for this service.
    # The registration endpoint in user_routes.py manages adding users to its own fake_users_db.
    # This service's _fake_db_users_auth_service needs to be populated too.
    # This is a limitation of fake DBs.

    # Let's refine this: the user object from get_current_user IS UserInDB
    # We need to ensure that UserInDB can have a 'disabled' attribute or similar.
    # The `_fake_db_users` in `user_routes.py` has a "disabled" field.
    # Let's assume our UserInDB model can reflect that.
    # Pydantic models don't store arbitrary extra fields unless configured.
    # For now, we'll rely on the fact that `get_user_from_db` returns a valid user.
    # A proper DB model would have this field.

    # Simplification: If user is fetched by get_current_user, consider active.
    # Real check for 'disabled' status would happen here if UserInDB model had it.
    # if current_user.disabled:
    #     raise HTTPException(status_code=400, detail="Inactive user")
    return User.model_validate(current_user) # Convert UserInDB to User (removes hashed_password)

# This function can be called by the registration route to populate this service's user view
def add_user_to_auth_service_db(user_data: UserInDB):
    _fake_db_users_auth_service[user_data.username] = user_data

# For testing purposes
def reset_auth_service_db_for_test():
    global _fake_db_users_auth_service # Ensure it's treated as global if re-assigning the dict itself
    _fake_db_users_auth_service.clear()
